name: Build and Deploy SimpleChat MCP Server

on:
  push:
    branches: [main]
    paths: ['application/external_apps/mcp_server/**']
  pull_request:
    branches: [main]
    paths: ['application/external_apps/mcp_server/**']
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  REGISTRY_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_NAME: simplechat-mcp-server
  RESOURCE_GROUP: simplechat-mcp-rg

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd application/external_apps/mcp_server
        pip install -r requirements.txt
        
    - name: Lint code
      run: |
        cd application/external_apps/mcp_server
        python -m py_compile simplechat_mcp_server.py
        
    - name: Test server initialization (dry run)
      run: |
        cd application/external_apps/mcp_server
        # Test with dummy token to verify imports and initialization
        export SIMPLECHAT_MCP_SIMPLECHAT_BEARER_TOKEN="test-token"
        export SIMPLECHAT_MCP_SIMPLECHAT_BASE_URL="http://localhost:5000"
        timeout 5s python simplechat_mcp_server.py || true
        
    - name: Log in to Azure
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Log in to Container Registry
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: az acr login --name ${{ env.REGISTRY_NAME }}
      
    - name: Build and push Docker image
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        cd application/external_apps/mcp_server
        
        # Set image tag based on environment
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          TAG="${{ github.event.inputs.deploy_environment }}-${{ github.sha }}"
        else
          TAG="latest"
        fi
        
        FULL_IMAGE_NAME="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${TAG}"
        
        # Build image
        docker build -t "${FULL_IMAGE_NAME}" .
        
        # Push image
        docker push "${FULL_IMAGE_NAME}"
        
        # Set output for deployment job
        echo "image_name=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
      id: build

  deploy-development:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Development
      run: |
        cd application/external_apps/mcp_server
        
        export DOCKER_REGISTRY="${{ env.REGISTRY_NAME }}.azurecr.io"
        export CONTAINER_IMAGE="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest"
        export RESOURCE_GROUP_NAME="${{ env.RESOURCE_GROUP }}-dev"
        export CONTAINER_APP_NAME="${{ env.IMAGE_NAME }}-dev"
        export SIMPLECHAT_BASE_URL="${{ secrets.SIMPLECHAT_BASE_URL_DEV }}"
        export SIMPLECHAT_BEARER_TOKEN="${{ secrets.SIMPLECHAT_BEARER_TOKEN_DEV }}"
        export LOCATION="eastus"
        
        chmod +x deploy-azure.sh
        ./deploy-azure.sh
        
    - name: Run health check
      run: |
        # Wait for deployment to complete
        sleep 30
        
        # Get container app FQDN
        FQDN=$(az containerapp show \
          --name "${{ env.IMAGE_NAME }}-dev" \
          --resource-group "${{ env.RESOURCE_GROUP }}-dev" \
          --query "properties.latestRevisionFqdn" \
          --output tsv)
        
        # Test health endpoints
        curl -f "https://${FQDN}/health" || exit 1
        curl -f "https://${FQDN}/ready" || exit 1
        
        echo "Health checks passed for development deployment"

  deploy-staging:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'staging'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Staging
      run: |
        cd application/external_apps/mcp_server
        
        export DOCKER_REGISTRY="${{ env.REGISTRY_NAME }}.azurecr.io"
        export CONTAINER_IMAGE="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}"
        export RESOURCE_GROUP_NAME="${{ env.RESOURCE_GROUP }}-staging"
        export CONTAINER_APP_NAME="${{ env.IMAGE_NAME }}-staging"
        export SIMPLECHAT_BASE_URL="${{ secrets.SIMPLECHAT_BASE_URL_STAGING }}"
        export SIMPLECHAT_BEARER_TOKEN="${{ secrets.SIMPLECHAT_BEARER_TOKEN_STAGING }}"
        export LOCATION="eastus"
        
        chmod +x deploy-azure.sh
        ./deploy-azure.sh

  deploy-production:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_environment == 'production'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Deploy to Production
      run: |
        cd application/external_apps/mcp_server
        
        export DOCKER_REGISTRY="${{ env.REGISTRY_NAME }}.azurecr.io"
        export CONTAINER_IMAGE="${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:production-${{ github.sha }}"
        export RESOURCE_GROUP_NAME="${{ env.RESOURCE_GROUP }}-prod"
        export CONTAINER_APP_NAME="${{ env.IMAGE_NAME }}-prod"
        export SIMPLECHAT_BASE_URL="${{ secrets.SIMPLECHAT_BASE_URL_PROD }}"
        export SIMPLECHAT_BEARER_TOKEN="${{ secrets.SIMPLECHAT_BEARER_TOKEN_PROD }}"
        export LOCATION="eastus"
        
        chmod +x deploy-azure.sh
        ./deploy-azure.sh
        
    - name: Validate production deployment
      run: |
        # Wait for deployment to complete
        sleep 60
        
        # Get container app FQDN
        FQDN=$(az containerapp show \
          --name "${{ env.IMAGE_NAME }}-prod" \
          --resource-group "${{ env.RESOURCE_GROUP }}-prod" \
          --query "properties.latestRevisionFqdn" \
          --output tsv)
        
        # Test health endpoints
        curl -f "https://${FQDN}/health" || exit 1
        curl -f "https://${FQDN}/ready" || exit 1
        
        echo "Production deployment validated successfully"